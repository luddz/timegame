{"version":3,"sources":["About/about.js","App.js","serviceWorker.js","index.js","About/ludvig-kindberg-bw.png"],"names":["About","className","src","ludde","height","roundedCircle","class","frameborder","allow","allowfullscreen","Component","Home","Dashboard","Boolean","window","location","hostname","match","ReactDOM","render","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","exact","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"iVA2EeA,G,uLAnEX,OACE,yBAAKC,UAAU,sBACb,yBAAKA,UAAU,qBACb,8CACA,yBAAKA,UAAU,YACb,kkBAMJ,yBAAKA,UAAU,oBACf,wCACE,yBAAKA,UAAU,WACb,6BACE,yBAAKA,UAAU,cAAcC,IAAKC,IAAOC,OAAO,QAAQC,eAAa,IACrE,uBAAGJ,UAAU,SAAQ,+CACrB,4BACE,2CACA,4CAEF,2BAAG,oDACH,qFAEJ,6BACE,yBAAKA,UAAU,cAAcC,IAAKC,IAAOC,OAAO,QAAQC,eAAa,IACrE,uBAAGJ,UAAU,SAAQ,0CACrB,4BACE,2CACA,4CAEF,2BAAG,oDACH,sFAEF,6BACE,yBAAKA,UAAU,cAAcC,IAAKC,IAAOC,OAAO,QAAQC,eAAa,IACrE,uBAAGJ,UAAU,SAAQ,2CACrB,4BACE,2CACA,4CAEF,2BAAG,oDACH,wEAEF,6BACE,yBAAKA,UAAU,cAAcC,IAAKC,IAAOC,OAAO,QAAQC,eAAa,IACrE,uBAAGJ,UAAU,SAAQ,2CACrB,4BACE,2CACA,4CAEF,2BAAG,oDACH,8EAGJ,yBAAKA,UAAU,0BACb,8CACA,yBAAKA,UAAU,SACb,4BAAQK,MAAM,QAAQJ,IAAI,GAAGK,YAAY,IAAIC,MAAM,0EAA0EC,iBAAe,Y,GA5DpIC,cCqDpB,SAASC,IACP,OACI,yBAAKV,UAAU,OACb,4BAAQA,UAAU,cAChB,8HASV,SAASW,IACP,OACE,6BACE,0CC/DcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBFaD,WACb,OACE,kBAAC,IAAD,KACE,yBAAKb,MAAM,+CACT,uBAAGA,MAAM,eAAec,KAAK,KAA7B,YACA,4BAAQd,MAAM,iBAAiBe,KAAK,SAASC,cAAY,WAAWC,cAAY,sBAAsBC,gBAAc,qBAAqBC,gBAAc,QAAQC,aAAW,qBACxK,0BAAMpB,MAAM,yBAEd,yBAAKA,MAAM,2BAA2BqB,GAAG,sBACvC,yBAAKrB,MAAM,cACT,uBAAGA,MAAM,qBAAqBc,KAAK,KAAnC,QAA4C,0BAAMd,MAAM,WAAZ,cAC5C,uBAAGA,MAAM,oBAAoBc,KAAK,UAAlC,YAWJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,KAChB,kBAAClB,EAAD,OAEF,kBAAC,IAAD,CAAOkB,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,cACV,kBAACjB,EAAD,WE3CI,MAASkB,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBEnInBC,EAAOC,QAAU,IAA0B,iD","file":"static/js/main.ae12d745.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ludde from './ludvig-kindberg-bw.png';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './about.css'\n// import '../App.css'\n\nclass About extends Component {\n  render(){\n    return (\n      <div className=\"aboutPageContainer\">\n        <div className=\"aboutAppContainer\">\n          <h2>About Timegame</h2>\n          <div className=\"aboutApp\">\n            <div>\n              placeholder text placeholder text placeholder text placeholder text placeholder text placeholder text placeholder text placeholder text placeholder text placeholder text placeholder text placeholder text placeholder text placeholder text placeholder text placeholder text\n              placeholder text placeholder text placeholder text placeholder text placeholder text placeholder text placeholder text placeholder text placeholder text placeholder text placeholder text placeholder text placeholder text placeholder text placeholder text placeholder text\n            </div>\n          </div>\n        </div>\n        <div className=\"aboutUsContainer\">\n        <h2>About us</h2>\n          <div className=\"theTeam\">\n            <div>\n              <img className=\"imageCenter\" src={ludde} height=\"200px\" roundedCircle />\n              <p className=\"names\"><b>Ludvig Kindberg</b></p>\n              <ul>\n                <li>Placeholder</li>\n                <li>Placeholder</li>\n              </ul>\n              <p><b>What I have learned:</b></p>\n              <p>Placeholder text, Placeholder Placeholder placeholder</p>\n            </div>\n          <div>\n            <img className=\"imageCenter\" src={ludde} height=\"200px\" roundedCircle />\n            <p className=\"names\"><b>Tom Axblad</b></p>\n            <ul>\n              <li>Placeholder</li>\n              <li>placeholder</li>\n            </ul>\n            <p><b>What I have learned:</b></p>\n            <p>Placeholder text, Placeholder Placeholder placeholder </p>\n          </div>\n          <div>\n            <img className=\"imageCenter\" src={ludde} height=\"200px\" roundedCircle />\n            <p className=\"names\"><b>Nathan Bhat</b></p>\n            <ul>\n              <li>Placeholder</li>\n              <li>Placeholder</li>\n            </ul>\n            <p><b>What I have learned:</b></p>\n            <p>Placeholder text placeholder placeholder</p>\n          </div>\n          <div>\n            <img className=\"imageCenter\" src={ludde} height=\"200px\" roundedCircle />\n            <p className=\"names\"><b>Alvin Hager</b></p>\n            <ul>\n              <li>Placeholder</li>\n              <li>Placeholder</li>\n            </ul>\n            <p><b>What I have learned:</b></p>\n            <p>Placeholder text placeholder text placeholder</p>\n          </div>\n        </div>\n        <div className=\"videoTutorialContainer\">\n          <h2>Video tutorial</h2>\n          <div className=\"video\">\n            <iframe class=\"video\" src=\"\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n          </div>\n        </div>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default About;\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport About from './About/about'\n// This site has 3 pages, all of which are rendered\n// dynamically in the browser (not server rendered).\n//\n// Although the page does not ever refresh, notice how\n// React Router keeps the URL up to date as you navigate\n// through the site. This preserves the browser history,\n// making sure things like the back button and bookmarks\n// work properly.\n\nexport default function BasicExample() {\n  return (\n    <Router>\n      <nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n        <a class=\"navbar-brand\" href=\"/\">Timegame</a>\n        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span class=\"navbar-toggler-icon\"></span>\n        </button>\n        <div class=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\n          <div class=\"navbar-nav\">\n            <a class=\"nav-item nav-link \" href=\"/\">Home <span class=\"sr-only\">(current)</span></a>\n            <a class=\"nav-item nav-link\" href=\"/about\">About</a>\n          </div>\n        </div>\n      </nav>\n        {/*\n          A <Switch> looks through all its children <Route>\n          elements and renders the first one whose path\n          matches the current URL. Use a <Switch> any time\n          you have multiple routes, but you want only one\n          of them to render at a time\n        */}\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/dashboard\">\n            <Dashboard />\n          </Route>\n        </Switch>\n    </Router>\n  );\n}\n\n// You can think of these components as \"pages\"\n// in your app.\n\nfunction Home() {\n  return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>\n            The inital skeleton webpage for the time game in the course DH2650.\n            Placeholder text for now.\n          </p>\n        </header>\n      </div>\n  );\n}\n\nfunction Dashboard() {\n  return (\n    <div>\n      <h2>Dashboard</h2>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/ludvig-kindberg-bw.bf779840.png\";"],"sourceRoot":""}